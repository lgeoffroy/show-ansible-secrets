#!/bin/bash

set -e

VERSION=0.1.0

usage() {
  cat << EOF
show_secrets v$VERSION
Show encrypted secrets in an ansible vars file.

Usage:
  show_secrets [options] <vars_file>
  show_secrets -h|--help

Options:
  -h, --help                                              Display this help
  -k <key>, --key=<key>                                   Decrypt only for the given secret name (repeatable)
  -p <password_file>, --password-file=<password_file>     Use a password file (if not defined in ansible.cfg)
  -v, --version                                           Show version
EOF
}

options=$(getopt -l "help,key:,password-file:,version" -o "hk:p:v" -- "$@")
eval set -- "$options"

while true; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -k|--key)
      shift
      keys+=("$1")
      ;;
    -p|--password-file)
      shift
      pwd_file=$1
      ;;
    -v|--version)
      echo "show_secrets version $VERSION"
      exit 0
      ;;
    --)
      shift
      break;;
  esac
  shift
done

if [ -z "$1" ]; then
  usage
  exit 0
fi

if ! command -v yq >/dev/null 2>&1; then
  cat << EOF
Missing dependency: show_secrets requires yq
Installation: pip3 install yq
EOF
exit 1
fi

file=$1

if [ ! -z $pwd_file ]; then
  ansible_command="ansible-vault decrypt --vault-password-file $pwd_file"
else
  ansible_command="ansible-vault decrypt"
fi

if [ ! -z $keys ]; then
  for key in ${keys[@]}; do
    echo -n "$key: "; yq -r ".$key" $file | $ansible_command | grep -v success;
  done
else
  grep vault $file | cut -d':' -f1 | while read secret; do echo -n "$secret: "; yq -r ".$secret" $file | $ansible_command | grep -v success; done;
fi
